DEPRECATED: The functions `altpll` and `alteraPll` in `Clash.Intel.ClockGen` and `clockWizard` and `clockWizardDifferential` in `Clash.Xilinx.ClockGen` have been deprecated because they are unsafe to use while this is not apparent from the name. The `lock` output signal of all these functions is an asynchronous signal which needs to be synchronized before it can be used (something the examples did in fact demonstrate). For the common use case, new functions are available, named `altpllSync`, `alteraPllSync`, `clockWizardSync` and `clockWizardDifferentialSync`. These functions are safe. For advanced use cases, the old functionality can be obtained through `unsafeAltpll`, `unsafeAlteraPll`, `unsafeClockWizard` and `unsafeClockWizardDifferential`.

NEW: `altpllSync` and `alteraPllSync` in `Clash.Intel.ClockGen` and `clockWizardSync` and `clockWizardDifferentialSync` in `Clash.Xilinx.ClockGen`. These replace the deprecated functions without the `Sync` suffix. Unlike the old functions, these functions are safe to use and have a reset signal for each output domain that can be used to keep the domain in reset while the clock output stabilizes.

CHANGED: The wizards in `Clash.Xilinx.ClockGen` now use the user-provided name as the name of the /instance/ rather than the name of the /IP core/. This change was also done for `Clash.Intel.ClockGen` in Clash v1.2.0 in March 2020, when Clash started generating Intel Qsys files. Before that, the user needed to generate a Qsys component manually. Now, in Clash v1.8.0, we also generate the Tcl for Xilinx wizards. When the user is responsible for creating the IP core/Qsys component, it makes sense to always set the component name to the user-provided value. But when that is also generated by Clash, that is no longer needed. Allowing users to set the instance name makes it possible to match on the instance in SDC files and such.
